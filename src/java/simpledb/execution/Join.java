package simpledb.execution;

import simpledb.transaction.TransactionAbortedException;
import simpledb.common.DbException;
import simpledb.storage.Tuple;
import simpledb.storage.TupleDesc;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private OpIterator[] children;
    private JoinPredicate predicate;
    private Tuple outerTuple;

    private static final long serialVersionUID = 1L;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        setChildren(new OpIterator[]{child1, child2});
        predicate = p;
        try {
            children[0].open();
            children[1].open();
            if (children[0].hasNext()) {
                outerTuple = children[0].next();
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    public JoinPredicate getJoinPredicate() {
        return predicate;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        return children[0].getTupleDesc().getFieldName(predicate.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        return children[1].getTupleDesc().getFieldName(predicate.getField2());
    }

    /**
     * @see TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return TupleDesc.merge(children[0].getTupleDesc(), children[1].getTupleDesc());
    }

    public void rewind() throws DbException, TransactionAbortedException {
        children[0].rewind();
        children[1].rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        OpIterator iter1 = children[0], iter2 = children[1];
        TupleDesc tupleDesc = getTupleDesc();
        while (outerTuple != null) {
            while (iter2.hasNext()) {
                Tuple innerTuple = iter2.next();
                Tuple res = new Tuple(tupleDesc);
                for (int i = 0; i < tupleDesc.numFields(); i++) {
                    if (i < iter1.getTupleDesc().numFields()) {
                        res.setField(i, outerTuple.getField(i));
                    } else {
                        res.setField(i, innerTuple.getField(i-iter1.getTupleDesc().numFields()));
                    }
                }
                return res;
            }
            iter2.rewind();
            if (iter1.hasNext()) {
                outerTuple = iter1.next();
            } else {
                outerTuple = null;
            }
        }
        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        return children;
    }

    @Override
    public void setChildren(OpIterator[] children) {
        this.children = children;
    }

}
